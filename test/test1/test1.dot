strict digraph {

    // module organisation and documentation

    subgraph cluster0 {
        label = <<u>test1</u>>
        fontcolor = green
        color = none
        href="target/doc/test1/index.html"

        "main" [href="target/doc/test1/fn.main.html"] [shape=none]

        subgraph cluster1·
        {
            label = <<u>m1</u>>
            fontcolor = green
            color = green
            href="target/doc/test1/m1/index.html"

            "m1::foo1" [href="target/doc/test1/m1/fn.foo1.html"] [shape=none]
            "m1::foo2" [href="target/doc/test1/m1/fn.foo2.html"] [shape=none]
            "m1::foo3" [href="target/doc/test1/m1/fn.foo3.html"] [shape=none]

            "m1::foo3::<fn() {m2::bar}>" [shape=none]
            "m1::foo1::<fn() {m2::bar}>" [shape=none]
            "m1::foo2::<F>" [shape=none]
            "<F as std::ops::Fn<()>>::call" [shape=none]
        }

        subgraph cluster2·
        {
            label = <<u>m2</u>>
            fontcolor = green
            color = green
            href="target/doc/test1/m2/index.html"

            "m2::bar" [href="target/doc/test1/m2/fn.bar.html"] [shape=none]
            "m2::baz" [href="target/doc/test1/m2/fn.baz.html"] [shape=none]
        }
    }
    subgraph cluster3 {
        label = <<u>std</u>>
        fontcolor = blue
        color = blue
        href="https://doc.rust-lang.org/std/index.html"

        "std::fmt::Arguments::new_v1" [shape=none]
        "std::io::_print" [shape=none]
    }

    // direct call

    "main" -> "m1::foo3::<fn() {m2::bar}>" [arrowhead=none]
    "main" -> "m1::foo1::<fn() {m2::bar}>" [arrowhead=none]

    "m1::foo1" -> "m1::foo2::<F>" [arrowhead=none]

    "m1::foo2" -> "<F as std::ops::Fn<()>>::call"

    "m1::foo3" -> "m1::foo2::<F>" [arrowhead=none]

    "m2::bar" -> "m2::baz"

    "m2::baz" -> "std::fmt::Arguments::new_v1"
    "m2::baz" -> "std::io::_print"

    // indirect call

    "m1::foo3::<fn() {m2::bar}>" -> "m1::foo3"
    "m1::foo3" -> "m1::foo3::<fn() {m2::bar}>" [style=dotted; constraint=false] [arrowhead=none]
    "m1::foo1::<fn() {m2::bar}>" -> "m1::foo1"
    "m1::foo1" -> "m1::foo1::<fn() {m2::bar}>" [style=dotted; constraint=false] [arrowhead=none]

    "m1::foo2::<F>" -> "m1::foo2"
    "m1::foo2" -> "m1::foo2::<F>" [style=dotted; constraint=false] [arrowhead=none]

    "m1::foo2::<F>" -> "m1::foo1" [style=dotted; constraint=false]
    "m1::foo2::<F>" -> "m1::foo3" [style=dotted; constraint=false]

    "<F as std::ops::Fn<()>>::call" -> "m1::foo2" [style=dotted; constraint=false]

    "m1::foo3::<fn() {m2::bar}>" -> "m2::bar" [style=dotted; constraint=false]
    "m1::foo1::<fn() {m2::bar}>" -> "m2::bar" [style=dotted; constraint=false]

    // virtual node

    "m1::foo3::<fn() {m2::bar}>" [label=""; fixedsize="false"; width=0; height=0; shape=none]
    "m1::foo1::<fn() {m2::bar}>" [label=""; fixedsize="false"; width=0; height=0; shape=none]
    "m1::foo2::<F>" [label=""; fixedsize="false"; width=0; height=0; shape=none]
}

